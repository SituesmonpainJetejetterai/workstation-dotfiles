" BASIC SETUP:

" set relative and static numbering for lines
set relativenumber 
set number

" Set scrolloff so I don't move around in a file, unless I'm at the top or the
" bottom
set scrolloff=8

" Don't abandon buffers in the background even if they are unsaved
set hidden

" setting up colours (unwanted change, but whatever)
set t_Co=256

" enter the current millenium
set nocompatible

" enable syntax, plugins (for netrw) and indentation
syntax enable
filetype plugin indent on
set autoindent

" Setting up the tabs from the Vim wiki on reddit
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

" FINDING FILES:

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer

" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" MISCELLANEOUS:

" highlight matching [{()}]
set showmatch

" improve text search inside a file
set incsearch

" Don't keep the higlight on after searching, it's annoying
set nohlsearch

" code folding
set foldenable
set foldlevelstart=10
set foldmethod=syntax

" Have lines wrap instead of continue off-screen
set linebreak

" Gives Vim access to a broader range of colours
set termguicolors

" set a default colour scheme, to override, make a filetype.vim in
" .vim/ftplugins
set bg=dark
let g:gruvbox_bold = '1'
let g:gruvbox_italic = '1'
let g:gruvbox_underline = '1'
let g:gruvbox_undercurl = '1'
let g:gruvbox_termcolors = '256'
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_hls_cursor = 'orange'
let g:gruvbox_italicize_comments = '1'
let g:gruvbox_improved_strings= '1'  

colorscheme gruvbox

" KEY MAPPINGS

" In order,
" mapped <SPACE> as the <Leader>
" mapped :vert term<CR> to <Leader>vt
" mapped :vert help<CR> to <Leader>vh

" Mapped > to resize the window by 2 units to the right.
" Mapped < to resize the window by 2 units to the left.
" Only for vertical windows, as I don't use (or like) the horizontal split.
" From this link: https://vim.fandom.com/wiki/Quick_window_resizing

" Copied easier split navigation bindings 
" https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally#easier-split-navigations

" Added a remap to copy the entire line from the point of the cursor

" Added remaps to center the file while searching next/previous

" Added a remap to undo break points (really important)
" Instead of undoing the entire change (which can really such), undo till a
" last recongnised mark, like a '.', ',', '!' and '?'.

" Autocomplete brackets logic 

" copied a command from a reddit comment to invoke the help command with an
" argument, but vertically

let g:mapleader=" "

cnoremap <Leader>vt :vert term<CR>
cnoremap <Leader>vh :vert help<CR>

nnoremap > <C-W>><C-W>>
nnoremap < <C-W><<C-W><

nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
nnoremap <C-h> <C-W>h

nnoremap Y y$

nnoremap n nzz
nnoremap N Nzz

inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

inoremap ( ()<ESC>hli
inoremap { {}<ESC>hli
inoremap [ []<ESC>hli
inoremap ` ``<ESC>hli

augroup brackets
    autocmd!
    autocmd FileType c,javascript,python,sh inoremap <buffer> ' ''<ESC>hli
    autocmd FileType c,javascript,python,sh inoremap <buffer> " ""<ESC>hli
augroup END

command! -nargs=? -complete=help Vh vert help <args>
