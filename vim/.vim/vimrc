" BASIC SETUP:

" Set the cursorline
set cursorline

" Set characters to signify tabs, whitespaces etc
set list
set lcs=tab:>~,trail:-,nbsp:%

" set relative and static numbering for lines
set relativenumber
set number

" Set scrolloff so I don't move around in a file, unless I'm at the top or the bottom
set scrolloff=8

" Don't abandon buffers in the background even if they are unsaved
set hidden

" setting up colours (unwanted change, but whatever)
set t_Co=256

" enter the current millenium
set nocompatible

" enable syntax, plugins and indentation
syntax enable
filetype plugin indent on
set autoindent

" Setting up the tabs from the Vim wiki on reddit
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

" highlight matching [{()}]
set showmatch

" improve text search inside a file
set incsearch

" Don't keep the higlight on after searching, it's annoying
set nohlsearch

" code folding
set foldenable
set foldlevelstart=10
set foldmethod=syntax

" Good backspace behaviour
set backspace=indent,eol,start

" Have lines wrap instead of continue off-screen
set linebreak

" Wrapping with breakindent
" Link: https://bluz71.github.io/2021/09/10/vim-tips-revisited.html
set breakindent
set breakindentopt=shift:2
set showbreak=////

" Persistent undo
" Link: https://bluz71.github.io/2021/09/10/vim-tips-revisited.html
let s:undodir = "/tmp/.undodir_" . $USER
if !isdirectory(s:undodir)
    call mkdir(s:undodir, "", 0700)
endif
let &undodir=s:undodir
set undofile



" ---------



" FINDING FILES:

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
" And ignore certain files while searching
set wildmenu
set wildignore+=.git/*,*/node_modules/*,*/target/*,*.class,*.png,*.gif,*.pdf,*.exe,*.so,*.jar,*.war,*.ear,*.dll,*.swp,*.zip,*.pyc

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer



" ---------



" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_preview = 1     " vertical preview splits
let g:netrw_winsize = 20    " width of explorer
let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings



"---------



" MISCELLANEOUS:

" Return to last edit position when opening files
" Link: https://github.com/MarcoLucidi01/dotfiles/blob/master/.vim/vimrc
augroup RETURN_TO_POSITION
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END



" ---------



" COLOURS

" Gives Vim access to a broader range of colours
set termguicolors

" set a default colour scheme, to override, make a filetype.vim in
" .vim/ftplugins
set bg=dark
let g:gruvbox_guisp_fallback = "bg"
let g:gruvbox_bold = '1'
let g:gruvbox_italic = '1'
let g:gruvbox_underline = '1'
let g:gruvbox_undercurl = '1'
let g:gruvbox_termcolors = '256'
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_hls_cursor = 'orange'
let g:gruvbox_italicize_comments = '1'
let g:gruvbox_improved_strings= '1'

colorscheme gruvbox



" ---------



" Statusline

" Function to get the git branch in the statusline
function Gitbranch()
    return trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null"))
endfunction

" Autogroup to run the command only when entering the window of the buffer
augroup Gitget
    autocmd!
    autocmd BufWinEnter * let b:git_branch = Gitbranch()
augroup END

" Link: https://stackoverflow.com/a/5380230
" Link: https://www.reddit.com/r/vim/comments/pq3xwa/how_to_get_the_git_branch_in_the_statusline/

set statusline=                             " Start
set statusline+=\{%n}%h                     " Show the buffer and help
set statusline+=\ %t%y\~(%{b:git_branch})   " Show the tail(filename), filetype, and git branch
set statusline+=\ %-8.(%l\:%c%V\:%L%)       " Show current line and column (and virtual column number) numbers that the cursor is on, and total lines
set statusline+=\ %p\%%                     " Show percentage through file in lines as in CTRL-G
set statusline+=\ %m%r                      " Show if file is modified, in readonly mode

" Enable the statusline
set laststatus=2



" ---------



" KEY MAPPINGS

" Map <SPACE> as the <Leader>
let g:mapleader=" "

" Map > to resize the window by 2 units to the right.
" Map < to resize the window by 2 units to the left.
" Only for vertical windows, as I don't use (or like) the horizontal split.
" Link: https://vim.fandom.com/wiki/Quick_window_resizing
nnoremap > <C-W>><C-W>>
nnoremap < <C-W><<C-W><

" Move lines up
nnoremap <C-k> :m-2<CR>
inoremap <C-k> :m-2<CR>
vnoremap <C-k> :m '<-2<CR>gv
" Move lines down
nnoremap <C-j> :m+1<CR>
inoremap <C-j> :m+1<CR>
vnoremap <C-j> :m '>+1<CR>gv

" Ability to indent repeatedly without changing modes
" This will re-select the last visual selection after you use > while in Visual mode
xnoremap > >gv
xnoremap < <gv

" Map `j` to `gj` and `k` to `gk` to move easily with wrapped lines
nnoremap j gj
nnoremap k gk

" Map `H` and `L` to move to the beginning and end of the line
nnoremap H g^
vnoremap H g^
nnoremap L g$
vnoremap L g$

" Easier split navigation bindings
" Link: https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally#easier-split-navigations
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
nnoremap <Leader>h <C-w>h
nnoremap <Leader>= <C-w>=

" Remap to copy the entire line from the point of the cursor
nnoremap Y y$

" Remaps to copy and paste, to and from the system buffer
" Will only work if vim is compiled with the clipboard flag
" noremap <C-y> "*y
" noremap <C-p> "*p
" noremap <C-Y> "+y
" noremap <C-P> "+p

" Remaps to center the cursor
" Link: https://bluz71.github.io/2021/09/10/vim-tips-revisited.html
nnoremap {  {zz
nnoremap }  }zz
nnoremap n  nzz
nnoremap N  Nzz
nnoremap ]c ]czz
nnoremap [c [czz
nnoremap [j <C-o>zz
nnoremap ]j <C-i>zz
nnoremap ]s ]szz
nnoremap [s [szz

" Remap to save a file if updated
nnoremap <Leader>w :update<CR>

" Remap to paste what you yanked, not what you deleted
nnoremap ,p "0p
nnoremap ,P "0P

" Remap to undo break points (really important)
" Instead of undoing the entire change (which can really such), undo till a last recongnised mark, like a '.', ',', '!' and '?'.
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" List buffers and prepare to switch
nnoremap gb :ls<CR>:b

" Open up netrw in a vertical split
nnoremap <Leader>v :Vexplore<CR>

" Reload buffers that have changed
nnoremap <Leader>r :checktime<CR>

" Surround with brackets or punctuation marks
vnoremap <Leader>( di()<ESC>hp
vnoremap <Leader>[ di[]<ESC>hp
vnoremap <Leader>{ di{}<ESC>hp
vnoremap <Leader>' di''<ESC>hp
vnoremap <Leader>" di""<ESC>hp
vnoremap <Leader>` di``<ESC>hp

" Autocomplete brackets and punctuation marks logic
inoremap <buffer>( ()<ESC>hli
inoremap <buffer>{ {}<ESC>hli
inoremap <buffer>[ []<ESC>hli
inoremap <buffer>` ``<ESC>hli
inoremap <buffer>* **<ESC>hli

augroup brackets
    autocmd!
    autocmd FileType markdown,python,sh inoremap <buffer> " ""<ESC>hli
    autocmd FileType vim,python,sh inoremap <buffer> ' ''<ESC>hli
augroup END

" Delete bracket pairs when first bracket is deleted
" nnoremap <Leader>d %x``x
nnoremap <Leader>d %x<C-o>x

" Invoke the help command with an argument, but vertically
command! -nargs=? -complete=help Vh vert help <args>
